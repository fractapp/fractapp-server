// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://fractapp.com/legal/tos.pdf",
        "contact": {
            "name": "Support",
            "email": "support@fractapp.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://github.com/fractapp/fractapp-server/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/sendCode": {
            "post": {
                "description": "send auth code to email/phone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Send code",
                "operationId": "send-auth-code",
                "parameters": [
                    {
                        "description": "Send code rq",
                        "name": "rq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SendCodeRq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/signIn": {
            "post": {
                "security": [
                    {
                        "AuthWithPubKey-SignTimestamp": []
                    },
                    {
                        "AuthWithPubKey-Sign": []
                    },
                    {
                        "AuthWithPubKey-Auth-Key": []
                    }
                ],
                "description": "sign in to fractapp account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Sign in",
                "operationId": "signIn",
                "parameters": [
                    {
                        "description": "Confirm auth rq",
                        "name": "rq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ConfirmAuthRq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.TokenRs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/info/total": {
            "get": {
                "description": "get user by id or blockchain address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Info"
                ],
                "summary": "Get total info",
                "operationId": "info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/info.TotalInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notification/subscribe": {
            "post": {
                "description": "subscribe for notifications about transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Subscribe",
                "operationId": "subscribe",
                "parameters": [
                    {
                        "description": "update token request",
                        "name": "rq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notification.UpdateTokenRq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/avatar/{userId}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get user avatar",
                "operationId": "avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/contacts": {
            "get": {
                "security": [
                    {
                        "AuthWithJWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get my contacts",
                "operationId": "myContacts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/matchContacts": {
            "get": {
                "security": [
                    {
                        "AuthWithJWT": []
                    }
                ],
                "description": "Only those who are in your contacts can see your profile by phone number. Your number should also be in their contacts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get my matched contacts",
                "operationId": "myMatchContacts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/my": {
            "get": {
                "security": [
                    {
                        "AuthWithJWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get my profile",
                "operationId": "myProfile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.MyProfile"
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/profile/search": {
            "get": {
                "description": "search user by email or username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Search user",
                "operationId": "search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username or email value",
                        "name": "value",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "email/username",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/profile.ShortUserProfile"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": ""
                    }
                }
            }
        },
        "/profile/substrateBalance": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get substrateBalance by address",
                "operationId": "getBalance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "currency",
                        "name": "currency",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.Balance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/transaction/status": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get tx status",
                "operationId": "getTxStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "hash",
                        "name": "hash",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.TxStatusRs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/transactions": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get transactions by address",
                "operationId": "getTransactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "currency",
                        "name": "currency",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/updateProfile": {
            "post": {
                "security": [
                    {
                        "AuthWithJWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update my profile",
                "operationId": "updateProfile",
                "parameters": [
                    {
                        "description": "update profile model",
                        "name": "rq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/profile.UpdateProfileRq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/uploadAvatar": {
            "post": {
                "security": [
                    {
                        "AuthWithJWT": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update avatar",
                "operationId": "uploadAvatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "image/jpeg or image/jpg or image/png",
                        "name": "format",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "avatar in base64 (https://onlinepngtools.com/convert-png-to-base64)",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/uploadContacts": {
            "post": {
                "security": [
                    {
                        "AuthWithJWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Upload my phone numbers of contacts",
                "operationId": "uploadMyContacts",
                "parameters": [
                    {
                        "description": "phone numbers of contacts",
                        "name": "rq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/userInfo": {
            "get": {
                "description": "get user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get user",
                "operationId": "profileInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "get user profile by user id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profile.ShortUserProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/username": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Is username exist?",
                "operationId": "username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username min length 4",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/substrate/base": {
            "get": {
                "description": "broadcast transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Substrate"
                ],
                "summary": "broadcast transaction",
                "operationId": "broadcast",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sender",
                        "name": "sender",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/substrate.BroadcastResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/substrate/fee": {
            "get": {
                "description": "calculate fee",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Substrate"
                ],
                "summary": "Calculate fee",
                "operationId": "fee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sender",
                        "name": "sender",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "receiver",
                        "name": "receiver",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "value",
                        "name": "value",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "currency",
                        "name": "currency",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/substrate.FeeInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.Address": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Blockchain address from account",
                    "type": "string"
                },
                "pubKey": {
                    "description": "PubKey from account",
                    "type": "string"
                },
                "sign": {
                    "description": "Sign for message (more information here: https://github.com/fractapp/fractapp-server/blob/main/AUTH.md)",
                    "type": "string"
                }
            }
        },
        "auth.ConfirmAuthRq": {
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "Addresses by network (0 - polkadot/ 1 - kusama) from account",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/auth.Address"
                    }
                },
                "code": {
                    "description": "The code that was sent",
                    "type": "string"
                },
                "type": {
                    "description": "Message type with code (0 - sms / 1 - email)",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "value": {
                    "description": "Email address or Phone number (without +)",
                    "type": "string"
                }
            }
        },
        "auth.SendCodeRq": {
            "type": "object",
            "properties": {
                "checkType": {
                    "description": "Now it is always zero. But in future it will have more types.",
                    "type": "integer",
                    "enum": [
                        0
                    ]
                },
                "type": {
                    "description": "Message type (0 - sms / 1 - email)",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "value": {
                    "description": "Email address or Phone number (without +)",
                    "type": "string"
                }
            }
        },
        "auth.TokenRs": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT token",
                    "type": "string"
                }
            }
        },
        "info.Price": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "info.SubstrateUrl": {
            "type": "object",
            "properties": {
                "network": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "info.TotalInfo": {
            "type": "object",
            "properties": {
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/info.Price"
                    }
                },
                "substrateUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/info.SubstrateUrl"
                    }
                }
            }
        },
        "notification.UpdateTokenRq": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Blockchain address",
                    "type": "string"
                },
                "network": {
                    "description": "network id (0 - polkadot/ 1 - kusama) from address",
                    "type": "integer"
                },
                "pubKey": {
                    "description": "Public key from address",
                    "type": "string"
                },
                "sign": {
                    "description": "signature for message (more information here: https://github.com/fractapp/fractapp-server/blob/main/AUTH.md)",
                    "type": "string"
                },
                "timestamp": {
                    "description": "timestamp from message",
                    "type": "integer"
                },
                "token": {
                    "description": "firebase token",
                    "type": "string"
                }
            }
        },
        "profile.Balance": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "profile.MyProfile": {
            "type": "object",
            "properties": {
                "avatarExt": {
                    "description": "avatar format (png/jpg/jpeg)",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "id from userInfo",
                    "type": "string"
                },
                "isMigratory": {
                    "description": "always false. This property is for the future",
                    "type": "boolean"
                },
                "lastUpdate": {
                    "description": "timestamp of the last userInfo update",
                    "type": "integer"
                },
                "name": {
                    "description": "name in fractapp",
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "username": {
                    "description": "username in fractapp",
                    "type": "string"
                }
            }
        },
        "profile.ShortUserProfile": {
            "type": "object",
            "properties": {
                "addresses": {
                    "description": "String addresses by network (0 - polkadot/ 1 - kusama) from account",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "avatarExt": {
                    "description": "avatar format (png/jpg/jpeg)",
                    "type": "string"
                },
                "id": {
                    "description": "id from userInfo",
                    "type": "string"
                },
                "lastUpdate": {
                    "description": "timestamp of the last userInfo update",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "profile.Transaction": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "integer"
                },
                "fee": {
                    "type": "string"
                },
                "floatFee": {
                    "type": "string"
                },
                "floatValue": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                },
                "to": {
                    "type": "string"
                },
                "usdFee": {
                    "type": "number"
                },
                "usdValue": {
                    "type": "number"
                },
                "userFrom": {
                    "type": "string"
                },
                "userTo": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "profile.TxStatusRs": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer"
                }
            }
        },
        "profile.UpdateProfileRq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "substrate.BroadcastResult": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "integer"
                }
            }
        },
        "substrate.FeeInfo": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "integer"
                }
            }
        },
        "substrate.TxBase": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "type": "string"
                },
                "fee": {
                    "type": "string"
                },
                "genesisHash": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "specVersion": {
                    "type": "integer"
                },
                "transactionVersion": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "AuthWithJWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "AuthWithPubKey-Auth-Key": {
            "type": "apiKey",
            "name": "Auth-Key",
            "in": "header"
        },
        "AuthWithPubKey-Sign": {
            "type": "apiKey",
            "name": "Sign",
            "in": "header"
        },
        "AuthWithPubKey-SignTimestamp": {
            "type": "apiKey",
            "name": "Sign-Timestamp",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
