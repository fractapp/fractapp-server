// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/anon/github/Fractapp/fractapp-server/notification/notificator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotificator is a mock of Notificator interface
type MockNotificator struct {
	ctrl     *gomock.Controller
	recorder *MockNotificatorMockRecorder
}

// MockNotificatorMockRecorder is the mock recorder for MockNotificator
type MockNotificatorMockRecorder struct {
	mock *MockNotificator
}

// NewMockNotificator creates a new mock instance
func NewMockNotificator(ctrl *gomock.Controller) *MockNotificator {
	mock := &MockNotificator{ctrl: ctrl}
	mock.recorder = &MockNotificatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificator) EXPECT() *MockNotificatorMockRecorder {
	return m.recorder
}

// Format mocks base method
func (m *MockNotificator) Format(receiver string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", receiver)
	ret0, _ := ret[0].(string)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockNotificatorMockRecorder) Format(receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockNotificator)(nil).Format), receiver)
}

// Validate mocks base method
func (m *MockNotificator) Validate(receiver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockNotificatorMockRecorder) Validate(receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockNotificator)(nil).Validate), receiver)
}

// SendCode mocks base method
func (m *MockNotificator) SendCode(receiver, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCode", receiver, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCode indicates an expected call of SendCode
func (mr *MockNotificatorMockRecorder) SendCode(receiver, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCode", reflect.TypeOf((*MockNotificator)(nil).SendCode), receiver, code)
}
